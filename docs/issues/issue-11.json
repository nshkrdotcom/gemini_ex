{"author":{"id":"MDQ6VXNlcjI2Mjk=","is_bot":false,"login":"jaimeiniesta","name":"Jaime Iniesta"},"body":"Hi, thanks for putting together this awesome library!\n\nI'm trying to get image recognition to work, but the example from https://hexdocs.pm/gemini_ex/Gemini.html#module-multimodal-content doesn't seem to work.\n\nHere's an example:\n\n```elixir\ndefmodule GeminiExGoogleVision do\n  require Logger\n\n  @img_url \"https://png.pngtree.com/png-clipart/20230804/original/pngtree-example-sample-grungy-stamp-vector-picture-image_9574934.png\"\n\n  def test(url \\\\ @img_url) do\n    {:ok, %{content_type: _content_type, data: data}} = download_image(url) |> IO.inspect(label: \"download_image\")\n\n    content = [\n      %{type: \"text\", text: \"Describe this image. If you can't see the image, just say you can't.\"},\n      %{type: \"image\", source: %{type: \"base64\", data: Base.encode64(data)}}\n    ]\n\n    Gemini.generate(content)\n  end\n\n  defp download_image(url, _max_size_bytes \\\\ 20 * 1024 * 1024) do\n    Logger.debug(\"[#{__MODULE__}] downloading image...\")\n\n    with %Req.Response{status: 200, body: body, headers: headers} <- Req.get!(url),\n         {:ok, content_type} <- get_content_type(headers) do\n      Logger.debug(\"[#{__MODULE__}] finished downloading image...\")\n\n      {:ok, %{content_type: content_type, data: body}}\n    else\n      {:error, :cant_get_content_type} ->\n        {:error, :cant_get_content_type}\n\n      %Req.Response{status: status} when status != 200 ->\n        {:erorr, :cant_download_image}\n    end\n  end\n\n  defp get_content_type(headers) do\n    headers\n    |> Enum.find(fn {key, _} -> String.downcase(key) == \"content-type\" end)\n    |> case do\n      {_, value} -> {:ok, hd(value)}\n      nil -> {:error, :cant_get_content_type}\n    end\n  end\nend\n```\n\nBy running `GeminiExGoogleVision.test()` it will download the image and include it in the request as inline data.\n\nBut this fails with:\n\n```\nThe following arguments were given to Gemini.APIs.Coordinator.format_content/1:\n    \n        # 1\n        %{\n          type: \"text\",\n          text: \"Describe this image. If you can't see the image, just say you can't.\"\n        }\n    \n    Attempted function clauses (showing 1 out of 1):\n    \n        defp format_content(%Gemini.Types.Content{role: role, parts: parts})\n    \n    (gemini_ex 0.2.1) lib/gemini/apis/coordinator.ex:447: Gemini.APIs.Coordinator.format_content/1\n    (elixir 1.18.4) lib/enum.ex:1714: Enum.\"-map/2-lists^map/1-1-\"/2\n    (gemini_ex 0.2.1) lib/gemini/apis/coordinator.ex:411: Gemini.APIs.Coordinator.build_generate_request/2\n    (gemini_ex 0.2.1) lib/gemini/apis/coordinator.ex:82: Gemini.APIs.Coordinator.generate_content/2\n\n```\n\nWhat's the proper way of doing this?\n\nAlso, shouldn't we pass the `content_type` along with the data?","comments":[],"createdAt":"2025-10-06T12:07:22Z","labels":[],"number":11,"state":"OPEN","title":"Multimodal example not working","updatedAt":"2025-10-06T12:07:22Z","url":"https://github.com/nshkrdotcom/gemini_ex/issues/11"}
